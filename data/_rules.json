{
  "rules": {
    ".read": true,
    ".write": false,
    "settings": {
      ".read": true,
      ".write": "
        auth != null /* user must be logged in */
        && root.child('users').child(auth.uid).child('admin').val() == true /* user must be admin */
        && root.child('users').child(auth.uid).child('active').val() == true /* user must be active */
      "
    },
    "pokedex": {
      ".read": true,
      ".write": false
    },
    "pages": {
      ".read": true,
      "$page_id": {
        ".write": "
          root.child('settings').child('maintenanceMode').val() == false /* app not in maintenance mode */
          && auth != null /* user must be logged in */
          && root.child('users').child(auth.uid).child('admin').val() == true /* user must be admin */
          && root.child('users').child(auth.uid).child('active').val() == true /* user must be active */
          && data.exists() /* no inserting */
          && newData.exists() /* no deleting */
          && newData.child('id').val() == data.child('id').val() /* same id */
          && newData.child('generation').val() == data.child('generation').val() /* same gen */
          && newData.child('letter').val() == data.child('letter').val() /* same letter */
        ",
        ".validate": "
          newData.hasChildren(['id', 'generation', 'letter', 'open'])
          && newData.child('id').isNumber()
          && newData.child('generation').isString()
          && newData.child('letter').isString()
          && newData.child('open').isBoolean()
        "
      }
    },
    "users": {
      ".read": true,
      "$user_id": {
        ".write": "
          root.child('settings').child('maintenanceMode').val() == false /* app not in maintenance mode */
          && auth != null /* user must be logged in */
          && $user_id == auth.uid /* user may only update their own record */
          && data.child('active').val() == true /* user must be active */
          && data.exists() /* no inserting */
          && newData.exists() /* no deleting */
          && newData.child('email').val() == data.child('email').val() /* user may not change their email */
          && newData.child('admin').val() == data.child('admin').val() /* user may not change their admin status */
        ",
        ".validate": "
          newData.hasChildren(['id', 'active', 'admin', 'color', 'email', 'ratings', 'userName'])
          && newData.child('id').isNumber()
          && newData.child('active').isBoolean()
          && newData.child('admin').isBoolean()
          && newData.child('color').isString()
          && newData.child('email').isString()
          && newData.child('ratings').isString()
          && newData.child('userName').isString()
        "
      }
    }
  }
}
/* vim: set ft=text ts=2 sw=2 et list: */

